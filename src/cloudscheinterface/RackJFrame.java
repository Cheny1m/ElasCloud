/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RackJFrame.java
 *
 * Created on 2014-2-17, 15:45:48
 */
package cloudscheinterface;

import com.datacenter.Rack;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * This class is the interface used to configure the rack information of a single 
 * datacenter. Racks can be added or removed on this interface.
 * @author Minxian
 */
public class RackJFrame extends javax.swing.JFrame {

    DefaultTableModel dtm;
    int dc_No;

    /** Creates new form RackJFrame */
    public RackJFrame(int dc_No) {
        initComponents();
        this.dc_No = dc_No;
        dtm = (DefaultTableModel) jTable1.getModel();
        this.setTitle("Configure Rack of DC" + (dc_No + 1));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configure Rack Information");
        setBounds(new java.awt.Rectangle(100, 100, 0, 0));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "50", "0", "0", "0"}
            },
            new String [] {
                "Rack No", "Type1", "Type2", "Type3", "Extra Time/ms"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Add Rack");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Remove Rack");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Save");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Cancel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton3)
                            .addComponent(jButton1))
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4)
                            .addComponent(jButton2))))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
    ArrayList<Integer> arr = new ArrayList<Integer>();
    int rowCount = jTable1.getRowCount();
    Object rowData[] = {rowCount + 1, 50, 0, 0, 1000};
    dtm.addRow(rowData);
    for (int index = 0; index < rowCount; index++) {
        dtm.setValueAt(index + 1, index, 0);
    }
}//GEN-LAST:event_jButton1ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// TODO add your handling code here:
    int selRow = jTable1.getSelectedRow();
    dtm.removeRow(selRow);
    for (int index = 0; index < jTable1.getRowCount(); index++) {
        dtm.setValueAt(index + 1, index, 0);
    }
}//GEN-LAST:event_jButton2ActionPerformed

private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
// TODO add your handling code here:
    this.dispose();
}//GEN-LAST:event_jButton4ActionPerformed

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// TODO add your handling code here:
    ArrayList<Rack> arr_rack = new ArrayList<Rack>();
    int rowNumber = jTable1.getRowCount();
    for (int index = 0; index < rowNumber; index++) {
        dtm.setValueAt(index + 1, index, 0);
    }
    checkRowNumber(rowNumber);
    checkInputsNonNegative(rowNumber, arr_rack);
    checkPMsInDataCenterAndRackEqual(arr_rack);

}//GEN-LAST:event_jButton3ActionPerformed

    //@Refactor: Check whether the row row number is above 0, there should be at least a rack in datacenter
    public void checkRowNumber(int rowNumber) {
        if (rowNumber < 1) {
            JOptionPane.showMessageDialog(this, rackNumError_Mes, mes_Dialog, JOptionPane.ERROR_MESSAGE);
        }
    }

    //@Refactor: Check whether the predefined PMs nuumbers are equal to the numbers set in the rack interface
    public void checkPMsInDataCenterAndRackEqual(ArrayList<Rack> arr_rack) {
        int pmType1 = 0;
        int pmType2 = 0;
        int pmType3 = 0;

        for (Rack rack1 : arr_rack) {
            pmType1 += rack1.getR_pmNum1();
            pmType2 += rack1.getR_pmNum2();
            pmType3 += rack1.getR_pmNum3();
        }

        int rack_pmType1 = Integer.parseInt(DataCenterADDJFrame.dtm.getValueAt(dc_No, 1).toString());
        int rack_pmType2 = Integer.parseInt(DataCenterADDJFrame.dtm.getValueAt(dc_No, 2).toString());
        int rack_pmType3 = Integer.parseInt(DataCenterADDJFrame.dtm.getValueAt(dc_No, 3).toString());

        if (pmType1 != rack_pmType1
                || pmType2 != rack_pmType2
                || pmType3 != rack_pmType3) {
            JOptionPane.showMessageDialog(this, numbersUnequal_Mes, mes_Dialog, JOptionPane.ERROR_MESSAGE);
        } else {
            this.dispose();
        }

    }

    //@Refactor: Check whether the inputs are non-negative
    public void checkInputsNonNegative(int rowNumber, ArrayList<Rack> arr_rack) {
        Rack rack;
        int rack_id;
        int pmType1;
        int pmType2;
        int pmType3;
        int extra_time;

        for (int row = 0; row < rowNumber; row++) {
            if (isNumber(dtm.getValueAt(row, 0).toString())
                    && isNumber(dtm.getValueAt(row, 1).toString())
                    && isNumber(dtm.getValueAt(row, 2).toString())
                    && isNumber(dtm.getValueAt(row, 3).toString())
                    && isNumber(dtm.getValueAt(row, 4).toString())) {
                rack_id = Integer.parseInt(dtm.getValueAt(row, 0).toString());
                pmType1 = Integer.parseInt(dtm.getValueAt(row, 1).toString());
                pmType2 = Integer.parseInt(dtm.getValueAt(row, 2).toString());
                pmType3 = Integer.parseInt(dtm.getValueAt(row, 3).toString());
                extra_time = Integer.parseInt(dtm.getValueAt(row, 4).toString());

                rack = new Rack(rack_id, pmType1, pmType2, pmType3, extra_time);
                arr_rack.add(rack);

            } else {
                JOptionPane.showMessageDialog(this, error_Mes, mes_Dialog, JOptionPane.ERROR_MESSAGE);
            }
        }
        DataCenterADDJFrame.arr_dc.get(dc_No).setArr_rack(arr_rack);
    }

    public boolean isNumber(String str) {
        //Match positive numbers
        pattern = Pattern.compile("[0-9]*");
        match = pattern.matcher(str);
        if (match.matches() == false) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RackJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RackJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RackJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RackJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new RackJFrame(1).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    Pattern pattern;
    Matcher match;
    private final String error_Mes = "Inputs should be non-negative integer";
    private final String rackNumError_Mes = "Rack number shoule be above 0";
    private final String mes_Dialog = "Illegal Inputs";
    private final String numbersUnequal_Mes = "Predefined PMs number of datacenters"
            + "should be equal to numbers set in racks";
}
