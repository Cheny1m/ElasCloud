/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DataCenterADDJFrame.java
 *
 * Created on 2014-2-17, 10:45:49
 */
package cloudscheinterface;

import com.datacenter.DataCenter;
import com.datacenter.LoadBalanceFactory;
import com.datacenter.Rack;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * This class is the user interface used to configure data centers information,
 * data centers can be added or removed on this interface. Also interface can
 * be turned to rack interface from here.
 * @author Minxian
 */
public class DataCenterADDJFrame extends javax.swing.JFrame {

    public static DefaultTableModel dtm;
    public static ArrayList<DataCenter> arr_dc = new ArrayList<DataCenter>();
    public static HashMap<String, ArrayList<DataCenter>> algorithmDataCenterMap = new HashMap<String, ArrayList<DataCenter>>();

    /** Creates new form DataCenterADDJFrame */
    public DataCenterADDJFrame() {
        initComponents();

        dtm = (DefaultTableModel) jTable2.getModel();
        if (arr_dc.isEmpty()) {
            Object rowData[] = {0, 50, 0, 0, 1000};
        	Properties properties = new Properties();
        	try {
				FileInputStream stream = new FileInputStream("src/com/generaterequest/MultipmNumOrigin.pro");
				properties.load(stream);
				String multiLine = properties.getProperty("multi");
				String[] lines = multiLine.split("&");
				for (int i = 0;i < lines.length;i++) {
					String[] params = lines[i].split("-");
					rowData[0] = params[0];
					rowData[4] = params[4];
					rowData[1] = params[1];
					rowData[2] = params[2];
					rowData[3] = params[3];
				
					dtm.addRow(rowData);
				}
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

        } else {
            for (DataCenter dc : arr_dc) {
                int pmQueueOne = 0;
                int pmQueueTwo = 0;
                int pmQueueThree = 0;
                for (Rack rack : dc.getArr_rack()) {
                    pmQueueOne += rack.getR_pmNum1();;
                    pmQueueOne += rack.getR_pmNum2();
                    pmQueueThree += rack.getR_pmNum3();
                }
                Object rowData[] = {dc.getD_id(), pmQueueOne, pmQueueTwo, pmQueueThree, dc.getD_timeDelay()};
                dtm.addRow(rowData);
            }
        }

        jTable2.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int x = jTable2.getSelectedRow();
                    new RackJFrame(x).setVisible(true);
                }
            }
        });

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DC No", "Type1", "Type2", "Type3", "Rec Time/ms"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jButton1.setText("Add DC");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Remove DC");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Save DCs");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(jButton1)
                .addGap(36, 36, 36)
                .addComponent(jButton2)
                .addContainerGap(98, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addComponent(jButton3)
                .addContainerGap(159, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
    int rowCount = jTable2.getRowCount();
    Object rowData[] = {rowCount + 1, 50, 0, 0, 1000};
    Properties properties = new Properties();
	try {
		FileInputStream stream = new FileInputStream("src/com/generaterequest/pmNumOrigin.pro");
		properties.load(stream);
		int type1 = Integer.parseInt(properties.getProperty("type1"));
		int type2 = Integer.parseInt(properties.getProperty("type2"));
		int type3 = Integer.parseInt(properties.getProperty("type3"));
		rowData[1] = type1;
		rowData[2] = type2;
		rowData[3] = type3;
	} catch (Exception e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
    dtm.addRow(rowData);
    for (int index = 0; index < rowCount; index++) {
        dtm.setValueAt(index + 1, index, 0);
    }
}//GEN-LAST:event_jButton1ActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// TODO add your handling code here:
    int selRow = jTable2.getSelectedRow();
    dtm.removeRow(selRow);
    for (int index = 0; index < jTable2.getRowCount(); index++) {
        dtm.setValueAt(index + 1, index, 0);
    }
}//GEN-LAST:event_jButton2ActionPerformed
    /**
     * Save DCs button event
     * @param evt 
     */

private void  saveMultiRow() {
	int count = dtm.getRowCount();
	StringBuilder line = new StringBuilder("");
	for (int i = 0;i < count;i++) {
		for (int j = 0;j < 5;j++) {
			line.append(dtm.getValueAt(i, j) + "-");
		}
		line.deleteCharAt(line.length() - 1);
		line.append("&");
	}
	line.deleteCharAt(line.length() - 1);
    try {

    	FileInputStream stream = new FileInputStream("src/com/generaterequest/MultipmNumOrigin.pro");
		Properties properties = new Properties();
		properties.load(stream);
		properties.setProperty("multi", line.toString());
		stream.close();
		FileOutputStream outputStream = new FileOutputStream("src/com/generaterequest/MultipmNumOrigin.pro");
		properties.store(outputStream, "");
	} catch (Exception e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	
}

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// TODO add your handling code here:
	saveMultiRow();
	
    arr_dc.removeAll(arr_dc); //Clear the contents of arr_dc to avoid repeatly add operations.
    int rowNumber = jTable2.getRowCount();
    for (int index = 0; index < rowNumber; index++) {
        dtm.setValueAt(index + 1, index, 0);
    }

    checkRowNumber(rowNumber);
    checkInputsNonNegative(rowNumber);
}//GEN-LAST:event_jButton3ActionPerformed
    //@Refactor: Check whether number is above 0 or not

    public void checkRowNumber(int rowNumber) {
        if (rowNumber < 1) {
            JOptionPane.showMessageDialog(jPanel1, dataCenterNumError_Mes, mes_Dialog, JOptionPane.ERROR_MESSAGE);
        }
    }

    //@Refactor: Check whether the inputs numbers are non-negative or not
    public void checkInputsNonNegative(int rowNumber) {
        DataCenter dc;
        int dc_No;
        int time_delay;
        for (int row = 0; row < rowNumber; row++) {
            if (isNumber(dtm.getValueAt(row, 0).toString())
                    && isNumber(dtm.getValueAt(row, 1).toString())
                    && isNumber(dtm.getValueAt(row, 2).toString())
                    && isNumber(dtm.getValueAt(row, 3).toString())
                    && isNumber(dtm.getValueAt(row, 4).toString())) {
                dc_No = Integer.parseInt(dtm.getValueAt(row, 0).toString());
                time_delay = Integer.parseInt(dtm.getValueAt(row, 4).toString());
                dc = new DataCenter(dc_No, time_delay);
                arr_dc.add(dc);
            } else {
                JOptionPane.showMessageDialog(jPanel1, error_Mes, mes_Dialog, JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public boolean isNumber(String str) {
        //Match positive numbers
        pattern = Pattern.compile("[0-9]*");
        match = pattern.matcher(str);
        if (match.matches() == false) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataCenterADDJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataCenterADDJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataCenterADDJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataCenterADDJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new DataCenterADDJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    public static javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    public static javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
    Pattern pattern;
    Matcher match;
    private final String error_Mes = "Inputs should be positive integer";
    private final String dataCenterNumError_Mes = "DataCenters number shoule be above 0";
    private final String mes_Dialog = "Illegal Inputs";
}
